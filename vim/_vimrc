set nocompatible               " be iMproved

filetype off                   " required!

call plug#begin('~/.vim/plugged')

"" Python
Plug 'fs111/pydoc.vim'

"" Lisp
"Plug 'kovisoft/slimv'

"" Clojure
"Plug 'guns/vim-clojure-static'
"Plug 'tpope/vim-fireplace'
Plug 'jbnicolai/rainbow_parentheses.vim'
"Plug 'guns/vim-clojure-highlight'

"" Ruby
Plug 'vim-ruby/vim-ruby'

"" Go
Plug 'fatih/vim-go'
Plug 'nsf/gocode', {'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh'}

"" Git
"" Show what has changed in the sidebar + ability to stage, revert hunks
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

"" HTML
Plug 'gregsexton/MatchTag'
Plug 'slim-template/vim-slim'

"" XML
Plug 'actionshrimp/vim-xpath'

Plug 'stephpy/vim-yaml'
"" css
Plug 'cakebaker/scss-syntax.vim'

Plug 'ekalinin/Dockerfile.vim'

Plug 'AndrewRadev/splitjoin.vim'
Plug 'w0rp/ale'
Plug 'tpope/vim-surround'
Plug 'machakann/vim-sandwich'
Plug 'jiangmiao/auto-pairs'

"" Navigation
Plug 'scrooloose/nerdtree'

"" Search
Plug 'wincent/ferret'

"" GPG
Plug 'https://gitorious.org/vim-gnupg/vim-gnupg.git'

" cursor with iterm2
Plug 'sjl/vitality.vim'

Plug 'Shougo/denite.nvim'
Plug 'zeis/vim-kolor'

" Initialize plugin system
call plug#end()

let g:rcsv_colorpairs = [
    \ ['darkred',     'darkred'],
    \ ['darkblue',    'darkblue'],
    \ ['darkgreen',   'darkgreen'],
    \ ['darkmagenta', 'darkmagenta'],
    \ ['NONE',        'NONE'],
    \ ]

filetype plugin indent on
silent! helptags ALL

let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 'never'

let g:kolor_underlined=1

set antialias
colorscheme kolor
syntax on

" on macvim there's no visual bell and avoid
" to beep every few keystrokes
set vb
if has("gui_running")
    set guifont=Roboto\ Mono\ Light:h12

    " remove menu and toolbar
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
endif

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

nnoremap <SPACE> <Nop>
let mapleader=" "

inoremap jj <ESC>
inoremap jk <ESC>
nnoremap ; :

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Vertical split
noremap <leader>vs :vsplit<CR>
noremap <leader>hs :split<CR>
" Open NerdTree
noremap <leader>n :NERDTreeToggle<CR>
" Clear highlight
noremap <leader>/ :nohlsearch<CR>
vnoremap // y/<C-R>"<CR>
" create taglist
noremap <leader>gt :!ctags --extra=+f --exclude=.git --exclude=log -R * `rvm gemdir`/gems/*<CR><CR>
" edit vimrc
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
" source vimrc
nnoremap <leader>sv :so $MYVIMRC<CR>
noremap <leader>aa :Ack "<C-R><C-W>"<CR>

nnoremap <leader>dq viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>q viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>q= viw<esc>a %><esc>hbi<%= <esc>lel
nnoremap <leader>q% viw<esc>a %}<esc>hbi{% <esc>lel


nnoremap <silent> ,g :<C-u>Denite grep<CR>
nnoremap <silent> <C-p> :<C-u>Denite file_rec<CR>
" Pt command on grep source
call denite#custom#var('grep', 'command', ['pt'])
call denite#custom#var('grep', 'default_opts',
            \ ['--nogroup', '--nocolor', '--smart-case'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])



set relativenumber
set number
" Moving Around/Editing
set cursorline              " have a line indicate the cursor location
set nostartofline           " Avoid moving cursor to BOL when jumping around
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a parent once it's balanced
set nowrap                  " don't wrap lines
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=4               " <tab> inserts 4 spaces
set shiftwidth=4            " but an indent level is 2 spaces wide.
set softtabstop=4           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set nofoldenable
set foldlevel=99            " don't fold by default
"some stuff to get the mouse going in term
set mouse=a

""Messages, Info, Status
set ls=2                    " always show status line
set confirm                 " Y-N-C prompt if closing with unsaved changes.
set showcmd                 " Show incomplete normal mode commands as I type.
set report=0                " : commands always print changed line count.
set shortmess+=a            " Use [+]/[RO]/[w] for modified/readonly/written.
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.

""status
set statusline=(%n)
set statusline+=[%f]       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" displays tabs with :set list & displays when a line runs off-screen
set listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×
set fillchars=diff:⣿,vert:│
set list
let &colorcolumn=join(range(90,999),",")
let &colorcolumn="80,".join(range(120,999),",")

let loaded_matchparen = 1
let g:syntastic_python_checkers=['flake8', 'pep8']
let g:syntastic_ruby_checkers = ['rubocop', 'reek', 'mri']
" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set smarttab                " Handle tabs more intelligently
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex

let g:ackprg = 'ag --nogroup --nocolor --column'

" nerdtree
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$', '\.sw[o,p]$', '__pycache__', '.git']

" python
au FileType python set omnifunc=pythoncomplete#Complete
au FileType python setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
au BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\

" Ruby
au Filetype ruby setlocal tabstop=2 softtabstop=2 shiftwidth=2 smartindent cinwords=if,elsif,else,unless,for,while,begin,rescue,def,class,module

" JavaScript
au FileType javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
au FileType javascript set omnifunc=javascriptcomplete#CompleteJS

" html/css
au FileType jade set omnifunc=javascriptcomplete#CompleteJS
au FileType jade setlocal expandtab shiftwidth=2 softtabstop=2
au FileType html set omnifunc=htmlcomplete#CompleteTags
au FileType html setlocal expandtab shiftwidth=2 softtabstop=2
au FileType css set omnifunc=csscomplete#CompleteCSS
au FileType css setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
au FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
au FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
au Filetype scss setlocal tabstop=2 softtabstop=2 shiftwidth=2 smartindent
au BufRead *.ejs set filetype=html
au BufRead *.erb set filetype=html
au BufNewFile,BufRead *.slim setlocal filetype=slim

au FileType go set expandtab!
au FileType go set listchars=tab:\ \ 
au FileType go hi SpecialKey guibg=NONE

" github
au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

" LISP
au FileType lisp setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

" clojure
autocmd VimEnter *       RainbowParenthesesToggle
autocmd Syntax   * RainbowParenthesesLoadRound
autocmd Syntax   * RainbowParenthesesLoadSquare
autocmd Syntax   * RainbowParenthesesLoadBraces

" go
au FileType go nmap <leader>r <Plug>(go-run)
autocmd VimEnter *       RainbowParenthesesToggle

let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_fmt_command = "goimports"
let g:ale_linters = {'go': ['gometalinter', 'gofmt', 'go build', 'gosimple']}
let g:ale_go_gometalinter_options = "--fast"
