set nocompatible               " be iMproved

" @see https://github.com/fholgado/minibufexpl.vim/issues/6
let g:miniBufExplCheckDupeBufs = 0

" Show syntax highlighting groups for word under cursor
nnoremap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" set 256 colors
set t_Co=256
" colorscheme
colorscheme wombat256
syntax on

if has("gui_running")
    set guifont=Monaco:h10
    " remove menu and toolbar
    set guioptions-=m
    set guioptions-=T
endif

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" python
Bundle 'pep8'
Bundle 'fs111/pydoc.vim'
" Bundle 'lambdalisue/nose.vim'
Bundle 'jmcantrell/vim-virtualenv'

" Ruby
Bundle 'vim-ruby/vim-ruby'
Bundle 'hallison/vim-ruby-sinatra'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-cucumber'

" Clojure
Bundle 'vim-scripts/VimClojure'

" CoffeeScript
Bundle 'kchmck/vim-coffee-script'

" css"
Bundle 'wavded/vim-stylus'

" JavaScript
Bundle 'pangloss/vim-javascript'
Bundle 'vim-scripts/JavaScript-Indent'
Bundle 'ekevin/jsbeautify'
" Bundle 'hallettj/jslint.vim'

" node.js
Bundle 'jamescarr/snipmate-nodejs'
Bundle 'guileen/vim-node'

Bundle 'scala/scala-dist', {'rtp': 'tool-support/src/vim' }

" code agnostic
Bundle 'scrooloose/syntastic'
Bundle 'msanders/snipmate.vim'
Bundle 'tpope/vim-surround'
Bundle 'sjl/gundo.vim'
Bundle 'vim-scripts/taglist.vim'
Bundle 'majutsushi/tagbar'

" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'

" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'

" Navigation
Bundle 'git://git.wincent.com/command-t.git'
" Bundle 'fholgado/minibufexpl.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'ervandew/supertab'
Bundle 'kien/ctrlp.vim'

" Search
Bundle 'git://github.com/mileszs/ack.vim.git'

" Indent guides with alternative color
Bundle 'git://github.com/nathanaelkane/vim-indent-guides.git'

" GPG
Bundle 'git://gitorious.org/vim-gnupg/vim-gnupg.git'

" Status line
" Bundle "Lokaltog/vim-powerline"

" cursor with iterm2
Bundle "sjl/vitality.vim"

"TODO list
Bundle "vimoutliner/vimoutliner"

Bundle "othree/html5.vim"
Bundle "tpope/vim-markdown"

" wm manager!
Bundle 'spolu/dwm.vim'

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

let mapleader=','

" ctrl-jklm  changes to that split
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l
noremap <c-h> <c-w>h

" Open NerdTree
noremap <leader>n :NERDTreeToggle<CR>
" Open tagbar
noremap <leader>l :TagbarToggle<CR>
" Open gundo
noremap <leader>g :GundoToggle<CR>
" Clear highlight
noremap <leader><space> :nohlsearch<CR>
" create taglist
noremap <leader>gt :!ctags --extra=+f --exclude=.git --exclude=log -R * `rvm gemdir`/gems/*<CR><CR>
" Toggle the taglist window
noremap <leader>t :TlistToggle
noremap <leader>st ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
nnoremap <leader>sv :so $MYVIMRC<CR>
noremap <leader>a :Ack "<C-R><C-W>"<CR>

nnoremap <leader>q viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>sq viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>q= viw<esc>a %><esc>hbi<%= <esc>lel

nnoremap <silent> <leader>b :set opfunc=AckGroup<CR>g@
vnoremap <silent> <leader>b :<C-U>call AckGroup(visualmode(), 1)<CR>

function! AckGroup(type, ...)
  " save current register
  let reg_save = @@

  echomsg &selection
  echomsg a:type
  echomsg a:0

  " restore current register
  let @@ = reg_save
endfunction


inoremap jj <ESC>
nnoremap ; :
" set macmeta
" map <M-D-Left> :bp<CR>
" map <M-D-Right> :bn<CR>
" map <D-w> :bd

set number

" show a line at column 79
if exists("&colorcolumn")
    set colorcolumn=79
endif

""" Moving Around/Editing
set cursorline              " have a line indicate the cursor location
set ruler                   " show the cursor position all the time
set nostartofline           " Avoid moving cursor to BOL when jumping around
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a parent once it's balanced
set nowrap                  " don't wrap lines
set linebreak               " don't wrap text in the middle of a word
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=4               " <tab> inserts 4 spaces
set shiftwidth=4            " but an indent level is 2 spaces wide.
set softtabstop=4           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set foldmethod=indent       " allow us to fold on indents
set foldlevel=99            " don't fold by default
"some stuff to get the mouse going in term
set mouse=a

"""" Messages, Info, Status
set ls=2                    " always show status line
set vb t_vb=                " Disable all bells.  I hate ringing/flashing.
set confirm                 " Y-N-C prompt if closing with unsaved changes.
set showcmd                 " Show incomplete normal mode commands as I type.
set report=0                " : commands always print changed line count.
set shortmess+=a            " Use [+]/[RO]/[w] for modified/readonly/written.
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.
"set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}

"""" status
set statusline=(%n)
set statusline+=[%t]       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=\ %{fugitive#statusline()}\    
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" displays tabs with :set list & displays when a line runs off-screen
set listchars=tab:>-,eol:¬,trail:-,precedes:<,extends:>
set showbreak=↪
set fillchars=diff:⣿,vert:│
set colorcolumn=+1
set list

" Resize splits when the window is resized
au VimResized * :wincmd =

""" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set smarttab                " Handle tabs more intelligently
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex

" nerdtree
let NERDTreeShowHidden=1
" minibufexpl
" let g:miniBufExplMapWindowNavVim = 1
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
" let g:miniBufExplModSelTarget = 1

" omnicompletion
""" Insert completion
" don't select first item, follow typing in autocomplete
set completeopt=menuone,longest,preview
set pumheight=6             " Keep a small completion window

" don't forget localleader
" python
au FileType python set omnifunc=pythoncomplete#Complete
au FileType python setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
au BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\
" Don't let pyflakes use the quickfix window
let g:pyflakes_use_quickfix = 0
let g:SuperTabDefaultCompletionType = "context"

" Ruby
au Filetype ruby setlocal tabstop=2 softtabstop=2 shiftwidth=2 smartindent cinwords=if,elsif,else,unless,for,while,begin,rescue,def,class,module

" Clojure
au Bufenter,Bufnewfile *.clj setl complete+=k~/.clj_completions

" Coffeescript
au FileType coffee setlocal expandtab shiftwidth=2 softtabstop=2

" JavaScript
au FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2
au FileType javascript set omnifunc=javascriptcomplete#CompleteJS

" html/css
au FileType jade set omnifunc=javascriptcomplete#CompleteJS
au FileType jade setlocal expandtab shiftwidth=2 softtabstop=2
au FileType html set omnifunc=htmlcomplete#CompleteTags
au FileType html setlocal expandtab shiftwidth=2 softtabstop=2
au FileType css set omnifunc=csscomplete#CompleteCSS
au FileType css setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2

" Helper
"" display indentation lines
" set list listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×

" highlight ExtraWhitespace ctermbg=red guibg=red
" match ExtraWhitespace /\s\+$/
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd InsertLeave * match ExtraWhitespace /\s\+$/
" autocmd BufWinLeave * call clearmatches()

