set nocompatible               " be iMproved

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

"" startup
Bundle 'molok/vim-scratch'
Bundle 'chriskempson/base16-vim'
Bundle 'nanotech/jellybeans.vim'
Bundle 'dhruvasagar/vim-railscasts-theme'
Bundle 'tomasr/molokai'

"" Python
Bundle 'pep8'
Bundle 'fs111/pydoc.vim'
" Bundle 'lambdalisue/nose.vim'
Bundle 'jmcantrell/vim-virtualenv'

"" Ruby
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-cucumber'

"" HTML
Bundle 'gregsexton/MatchTag'

"" CoffeeScript
""Bundle 'kchmck/vim-coffee-script'
Bundle 'AndrewRadev/vim-coffee-script'

"" JavaScript
Bundle 'jelera/vim-javascript-syntax'
"Bundle 'maksimr/vim-jsbeautify'
"" check if no conflict with syntastic
"Bundle 'joestelmach/lint.vim'

"" node.js
"" Bundle 'guileen/vim-node'

"" css
Bundle 'cakebaker/scss-syntax.vim'

"" go
Bundle 'jnwhiteh/vim-golang'
Bundle 'Blackrush/vim-gocode'
"Bundle 'nsf/gocode', {'rtp': 'vim'}

Bundle 'AndrewRadev/splitjoin.vim'
"" Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-surround'
"" Bundle 'sjl/gundo.vim'
Bundle 'vim-scripts/taglist.vim'
Bundle 'Raimondi/delimitMate'
""Bundle 'jpalardy/vim-slime'
""Bundle 'juanpabloaj/ShowMarks'
""Bundle 'SirVer/ultisnips'

"" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
"" rubbish install see vim/README.txt
"Bundle 'Rixius/sparkup', {'rtp': 'vim/'}

"" vim-scripts repos
"" Bundle 'L9'
"" Bundle 'FuzzyFinder'

"" Navigation
"" Bundle "jeetsukumaran/vim-buffergator"
Bundle 'scrooloose/nerdtree'
Bundle 'ervandew/supertab'
"" Bundle "Valloric/YouCompleteMe"
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'terryma/vim-multiple-cursors'

"" Search
Bundle 'git://github.com/mileszs/ack.vim.git'

"" GPG
Bundle 'git://gitorious.org/vim-gnupg/vim-gnupg.git'

" cursor with iterm2
Bundle 'sjl/vitality.vim'

" set 256 colors
set t_Co=256
set background=dark
colorscheme hybrid
syntax on

set noantialias
" on macvim there's no visual bell and avoid
" to beep every few keystrokes
set vb
if has("gui_running")
    "set guifont=Inconsolata-g:h11
    "set guifont=Terminus:h12
    "set guifont=Envy\ Code\ R:h12
    "set guifont=Andale\ Mono:h9
    "set guifont=ProFontWindows:h11
    "set guifont=GohuFont:h11
    "set guifont=Fixed:h13
    set guifont=Monaco:h10
    "set guifont=fixed-6x13:h13
    set linespace=-2


    " remove menu and toolbar
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
endif

filetype plugin indent on     " required!

let mapleader=','

inoremap jj <ESC>
inoremap jk <ESC>
nnoremap ; :

" Avoid using arrows
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Avoid using <esc>
"noremap <esc> <NOP>
"inoremap <esc> <NOP>

" ctrl-jklm  changes to that split
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l
noremap <c-h> <c-w>h

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Vertical split
noremap <leader>vs :vsplit<CR>
noremap <leader>hs :split<CR>
" Open NerdTree
noremap <leader>n :NERDTreeToggle<CR>
" Open tagbar
noremap <leader>l :TagbarToggle<CR>
" Open gundo
noremap <leader>g :GundoToggle<CR>
" Clear highlight
noremap <leader><space> :nohlsearch<CR>
" create taglist
noremap <leader>gt :!ctags --extra=+f --exclude=.git --exclude=log -R * `rvm gemdir`/gems/*<CR><CR>
" Toggle the taglist window
noremap <leader>lt :TlistToggle
noremap <leader>st ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
nnoremap <leader>sv :so $MYVIMRC<CR>
noremap <leader>a :Ack "<C-R><C-W>"<CR>

nnoremap <leader>q viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>sq viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>q= viw<esc>a %><esc>hbi<%= <esc>lel
nnoremap <leader>b :BuffergatorToggle<cr>
nnoremap <leader>r :30winc <<cr>
nnoremap <leader>a :30winc ><cr>

" nnoremap <silent> <leader>b :set opfunc=AckGroup<CR>g@
" vnoremap <silent> <leader>b :<C-U>call AckGroup(visualmode(), 1)<CR>

function! AckGroup(type, ...)
    " save current register
    let reg_save = @@

    echomsg &selection
    echomsg a:type
    echomsg a:0

    " restore current register
    let @@ = reg_save
endfunction

" Run specs with ',t' via Gary Bernhardt
function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !clear
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    elseif match(a:filename, '_test\.rb$') != -1
        exec ":!ruby -Itest " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = 
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

" run test runner
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>

"let g:html_indent_inctags = "html,body,head,tbody"

set number

" Moving Around/Editing
set cursorline              " have a line indicate the cursor location
set nostartofline           " Avoid moving cursor to BOL when jumping around
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a parent once it's balanced
set nowrap                  " don't wrap lines
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=4               " <tab> inserts 4 spaces
set shiftwidth=4            " but an indent level is 2 spaces wide.
set softtabstop=4           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set nofoldenable
set foldlevel=99            " don't fold by default
"some stuff to get the mouse going in term
set mouse=a

""Messages, Info, Status
set ls=2                    " always show status line
set confirm                 " Y-N-C prompt if closing with unsaved changes.
set showcmd                 " Show incomplete normal mode commands as I type.
set report=0                " : commands always print changed line count.
set shortmess+=a            " Use [+]/[RO]/[w] for modified/readonly/written.
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.
set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}

""status
set statusline=(%n)
set statusline+=[%t]       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" displays tabs with :set list & displays when a line runs off-screen
set listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×
set fillchars=diff:⣿,vert:│
set list
let &colorcolumn=join(range(81,999),",")
let &colorcolumn="80,".join(range(120,999),",")

let loaded_matchparen = 1

" Resize splits when the window is resized
"" au VimResized * :wincmd =

" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set smarttab                " Handle tabs more intelligently
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex

" nerdtree
" let NERDTreeShowHidden=1

" python
au FileType python set omnifunc=pythoncomplete#Complete
au FileType python setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
au BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\
" Don't let pyflakes use the quickfix window
let g:pyflakes_use_quickfix = 0
" let g:SuperTabDefaultCompletionType = "context"

" Ruby
au Filetype ruby setlocal tabstop=2 softtabstop=2 shiftwidth=2 smartindent cinwords=if,elsif,else,unless,for,while,begin,rescue,def,class,module

" JavaScript
au FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2
au FileType javascript set omnifunc=javascriptcomplete#CompleteJS
"au FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>

" Coffeescript
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" html/css
au FileType jade set omnifunc=javascriptcomplete#CompleteJS
au FileType jade setlocal expandtab shiftwidth=2 softtabstop=2
au FileType html set omnifunc=htmlcomplete#CompleteTags
au FileType html setlocal expandtab shiftwidth=2 softtabstop=2
au FileType css set omnifunc=csscomplete#CompleteCSS
au FileType css setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
au FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
au FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
au Filetype scss setlocal tabstop=2 softtabstop=2 shiftwidth=2 smartindent
au BufRead *.ejs set filetype=html
au BufRead *.erb set filetype=html

au FileType go set expandtab!
au FileType go set listchars=tab:\ \ 
au FileType go hi SpecialKey guibg=NONE
